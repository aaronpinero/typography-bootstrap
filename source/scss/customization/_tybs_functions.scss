////////// leading function //////////
//
// used to calculate a spacer-based leading for a given font size
// this function makes it easier to maintain a consistent baseline grid
//
// line height adjustment variables are used in the tylead function to
// increase or decrease the leading; smaller values will result in
// larger leading; the adjustment variable values can be overridden,
// but in most cases the defaults will do

$leading-tall:0.8   !default; 
$leading-base:0.9   !default;
$leading-head:1     !default;
$leading-short:1.2  !default;

@function leading($font-size,$leading-style:base) {
  // by default, use the base adjustment value
  // the base adjustment value is less than 1 so that
  // the calculated leading will always be greater than the font size
  $adjustment_factor:$leading-base;
  // if the leading style is 'tall', the adjustment factor will be smaller
  @if $leading-style == tall {
    $adjustment_factor:$leading-tall;
  }
  // if the leading style is 'heading', the adjustment factor will be larger
  @else if $leading-style == head {
    $adjustment_factor:$leading-head;
  }
  // if the leading style is 'short', the adjustment factor will be largest
  @else if $leading-style == short {
    $adjustment_factor:$leading-short;
  }
  //
  // now that we have the adjustment factor value, calculate the leading
  // if the font size is smaller than the adjusted grid unit
  @if $font-size <= ($type-spacer*$adjustment_factor) {
    @return $spacer;
  }
  // else, the leading will be some multiple of the grid unit
  @else {
    @return ceil($font-size/($type-spacer*$adjustment_factor)) * $type-spacer;
  }
}

////////// space function //////////
//
// used to calculate a multiple of the spacer;
// this function makes it easier to work with the spacer

@function space($multiplier:1) {
  @return $spacer * $multiplier;
}

////////// typespace function //////////
//
// used to calculate a multiple of the spacer;
// this function makes it easier to work with the spacer

@function typespace($multiplier:1) {
  @return $type-spacer * $multiplier;
}

////////// fontsize function //////////
// 
// used to calculate a font size from the modular scale
// based on the base font size, scale ratio, and number of substeps
// this function makes it easier to work with the modular scale
// based on https://www.layoutgridcalculator.com/typographic-scale/

@function fontsize($step:0,$substep:0) {
  $i: 0;
  $size: $font-size-base;
  @if $step < 0 {
    @while $i > $step {
      $size: $size/$scale-ratio;
      $i: $i - 1;
    }
  }
  @else if $step > 0 {
    @while $i < $step {
      $size: $size*$scale-ratio;
      $i: $i + 1;
    }
  }
  @if $substep > 0 {
    $size: $size + (((($size * $scale-ratio) - $size)/$scale-substeps) * $substep);
  }
  @else if $substep < 0 {
    $size: $size + ((($size - ($size / $scale-ratio))/$scale-substeps) * $substep);
  }
  @return $size;
}